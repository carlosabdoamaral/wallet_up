// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: config.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppConfigServiceClient is the client API for AppConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppConfigServiceClient interface {
	Create(ctx context.Context, in *NewAppConfigRequest, opts ...grpc.CallOption) (*AppConfig, error)
	Details(ctx context.Context, in *AppConfig, opts ...grpc.CallOption) (*StatusResponse, error)
}

type appConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppConfigServiceClient(cc grpc.ClientConnInterface) AppConfigServiceClient {
	return &appConfigServiceClient{cc}
}

func (c *appConfigServiceClient) Create(ctx context.Context, in *NewAppConfigRequest, opts ...grpc.CallOption) (*AppConfig, error) {
	out := new(AppConfig)
	err := c.cc.Invoke(ctx, "/proto.AppConfigService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appConfigServiceClient) Details(ctx context.Context, in *AppConfig, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/proto.AppConfigService/Details", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppConfigServiceServer is the server API for AppConfigService service.
// All implementations must embed UnimplementedAppConfigServiceServer
// for forward compatibility
type AppConfigServiceServer interface {
	Create(context.Context, *NewAppConfigRequest) (*AppConfig, error)
	Details(context.Context, *AppConfig) (*StatusResponse, error)
	mustEmbedUnimplementedAppConfigServiceServer()
}

// UnimplementedAppConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAppConfigServiceServer struct {
}

func (UnimplementedAppConfigServiceServer) Create(context.Context, *NewAppConfigRequest) (*AppConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAppConfigServiceServer) Details(context.Context, *AppConfig) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Details not implemented")
}
func (UnimplementedAppConfigServiceServer) mustEmbedUnimplementedAppConfigServiceServer() {}

// UnsafeAppConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppConfigServiceServer will
// result in compilation errors.
type UnsafeAppConfigServiceServer interface {
	mustEmbedUnimplementedAppConfigServiceServer()
}

func RegisterAppConfigServiceServer(s grpc.ServiceRegistrar, srv AppConfigServiceServer) {
	s.RegisterService(&AppConfigService_ServiceDesc, srv)
}

func _AppConfigService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewAppConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppConfigServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AppConfigService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppConfigServiceServer).Create(ctx, req.(*NewAppConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppConfigService_Details_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppConfigServiceServer).Details(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AppConfigService/Details",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppConfigServiceServer).Details(ctx, req.(*AppConfig))
	}
	return interceptor(ctx, in, info, handler)
}

// AppConfigService_ServiceDesc is the grpc.ServiceDesc for AppConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AppConfigService",
	HandlerType: (*AppConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AppConfigService_Create_Handler,
		},
		{
			MethodName: "Details",
			Handler:    _AppConfigService_Details_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config.proto",
}
